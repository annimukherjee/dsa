name: DSA Problem Tracker

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  update-tracker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Parse commit and update tracker
      run: |
        # Get the latest commit message
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        COMMIT_DATE=$(git log -1 --pretty=format:"%ci" | cut -d' ' -f1)
        COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
        
        echo "Latest commit: $COMMIT_MSG"
        echo "Commit date: $COMMIT_DATE"
        
        # Check if commit message matches DSA pattern
        # Pattern: YYYY-MM-DD PLATFORM DESCRIPTION
        if [[ $COMMIT_MSG =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]]+(LeetCode|HackerRank|Codeforces|CodeChef|AtCoder)[[:space:]]+.+ ]]; then
          echo "✅ DSA problem commit detected!"
          
          # Extract platform
          PLATFORM=$(echo "$COMMIT_MSG" | grep -oE "(LeetCode|HackerRank|Codeforces|CodeChef|AtCoder)")
          echo "Platform: $PLATFORM"
          
          # Create or update tracker data
          mkdir -p .github/tracker
          
          # Create JSON data file if it doesn't exist
          if [ ! -f .github/tracker/data.json ]; then
            echo '{"entries": []}' > .github/tracker/data.json
          fi
          
          # Add entry to tracker data
          node -e "
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('.github/tracker/data.json', 'utf8'));
            const newEntry = {
              date: '$COMMIT_DATE',
              platform: '$PLATFORM',
              message: '$COMMIT_MSG',
              timestamp: new Date().toISOString()
            };
            
            // Check if entry for this date already exists
            const existingIndex = data.entries.findIndex(entry => entry.date === '$COMMIT_DATE');
            if (existingIndex >= 0) {
              data.entries[existingIndex] = newEntry;
            } else {
              data.entries.push(newEntry);
            }
            
            // Sort by date
            data.entries.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            fs.writeFileSync('.github/tracker/data.json', JSON.stringify(data, null, 2));
            console.log('Tracker data updated!');
          "
          
          # Generate enhanced HTML tracker visualization
          node -e "
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('.github/tracker/data.json', 'utf8'));
            
            // Generate last 365 days
            const today = new Date();
            const oneYearAgo = new Date(today.getTime() - 365 * 24 * 60 * 60 * 1000);
            
            // Calculate enhanced statistics
            function calculateStats(entries) {
              const totalProblems = entries.length;
              const last30Days = entries.filter(e => new Date(e.date) >= new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000)).length;
              const last7Days = entries.filter(e => new Date(e.date) >= new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000)).length;
              
              // Calculate current streak
              let currentStreak = 0;
              let tempDate = new Date(today);
              tempDate.setHours(0, 0, 0, 0);
              
              while (true) {
                const dateStr = tempDate.toISOString().split('T')[0];
                if (entries.find(e => e.date === dateStr)) {
                  currentStreak++;
                  tempDate.setDate(tempDate.getDate() - 1);
                } else {
                  break;
                }
              }
              
              // Calculate longest streak
              let longestStreak = 0;
              let tempStreak = 0;
              const sortedDates = entries.map(e => e.date).sort();
              
              for (let i = 0; i < sortedDates.length; i++) {
                if (i === 0) {
                  tempStreak = 1;
                } else {
                  const prevDate = new Date(sortedDates[i - 1]);
                  const currDate = new Date(sortedDates[i]);
                  const diffDays = (currDate - prevDate) / (1000 * 60 * 60 * 24);
                  
                  if (diffDays === 1) {
                    tempStreak++;
                  } else {
                    longestStreak = Math.max(longestStreak, tempStreak);
                    tempStreak = 1;
                  }
                }
              }
              longestStreak = Math.max(longestStreak, tempStreak);
              
              // Platform counts
              const platformCounts = entries.reduce((acc, entry) => {
                acc[entry.platform] = (acc[entry.platform] || 0) + 1;
                return acc;
              }, {});
              
              // Monthly data for charts
              const monthlyData = {};
              entries.forEach(entry => {
                const month = entry.date.substring(0, 7); // YYYY-MM
                monthlyData[month] = (monthlyData[month] || 0) + 1;
              });
              
              return {
                totalProblems,
                last30Days,
                last7Days,
                currentStreak,
                longestStreak,
                platformCounts,
                monthlyData
              };
            }
            
            const stats = calculateStats(data.entries);
            
            // Generate chart data for last 12 months
            const chartMonths = [];
            const chartValues = [];
            for (let i = 11; i >= 0; i--) {
              const date = new Date(today);
              date.setMonth(date.getMonth() - i);
              const monthKey = date.toISOString().substring(0, 7);
              const monthName = date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });
              chartMonths.push(monthName);
              chartValues.push(stats.monthlyData[monthKey] || 0);
            }
            
            let html = \`
            <!DOCTYPE html>
            <html>
            <head>
                <title>DSA Problem Solving Tracker</title>
                <meta charset=\"UTF-8\">
                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
                <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js\"></script>
                <style>
                    * { box-sizing: border-box; }
                    
                    body { 
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif; 
                        margin: 0; 
                        padding: 20px;
                        background: linear-gradient(135deg, #0d1117 0%, #161b22 100%);
                        color: #e6edf3; 
                        min-height: 100vh;
                    }
                    
                    .container { 
                        max-width: 1200px; 
                        margin: 0 auto; 
                        background: rgba(22, 27, 34, 0.8);
                        backdrop-filter: blur(10px);
                        border-radius: 16px;
                        padding: 30px;
                        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                        border: 1px solid rgba(48, 54, 61, 0.5);
                    }
                    
                    .header {
                        text-align: center;
                        margin-bottom: 40px;
                        background: linear-gradient(90deg, #39d353, #26a641);
                        -webkit-background-clip: text;
                        -webkit-text-fill-color: transparent;
                        background-clip: text;
                    }
                    
                    .header h1 { 
                        font-size: 2.5rem; 
                        margin: 0; 
                        font-weight: 700;
                    }
                    
                    .header p { 
                        font-size: 1.1rem; 
                        margin: 10px 0 0 0; 
                        color: #8b949e;
                    }
                    
                    .stats-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                        gap: 20px;
                        margin-bottom: 40px;
                    }
                    
                    .stat-card {
                        background: linear-gradient(135deg, rgba(48, 54, 61, 0.8), rgba(33, 38, 45, 0.8));
                        border-radius: 12px;
                        padding: 20px;
                        text-align: center;
                        border: 1px solid rgba(48, 54, 61, 0.5);
                        transition: transform 0.2s ease, box-shadow 0.2s ease;
                    }
                    
                    .stat-card:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
                    }
                    
                    .stat-value {
                        font-size: 2rem;
                        font-weight: 700;
                        color: #39d353;
                        margin-bottom: 5px;
                    }
                    
                    .stat-label {
                        color: #8b949e;
                        font-size: 0.9rem;
                        font-weight: 500;
                    }
                    
                    .tracker-section {
                        margin-bottom: 40px;
                    }
                    
                    .section-title {
                        font-size: 1.3rem;
                        margin-bottom: 20px;
                        color: #f0f6fc;
                        font-weight: 600;
                    }
                    
                    .tracker-grid { 
                        display: inline-block; 
                        background: rgba(13, 17, 23, 0.6);
                        padding: 20px;
                        border-radius: 12px;
                        border: 1px solid rgba(48, 54, 61, 0.5);
                    }
                    
                    .tracker-row { 
                        display: flex; 
                        margin-bottom: 3px; 
                    }
                    
                    .day-cell { 
                        width: 12px; 
                        height: 12px; 
                        margin: 1px; 
                        border-radius: 3px; 
                        cursor: pointer;
                        transition: all 0.2s ease;
                        position: relative;
                    }
                    
                    .day-cell:hover {
                        transform: scale(1.5);
                        z-index: 10;
                        border: 2px solid #58a6ff;
                    }
                    
                    .day-0 { background-color: #161b22; }
                    .day-1 { background-color: #0e4429; }
                    .day-2 { background-color: #006d32; }
                    .day-3 { background-color: #26a641; }  
                    .day-4 { background-color: #39d353; }
                    
                    .tooltip {
                        position: absolute;
                        background: rgba(13, 17, 23, 0.95);
                        border: 1px solid #30363d;
                        border-radius: 8px;
                        padding: 12px;
                        font-size: 12px;
                        z-index: 1000;
                        pointer-events: none;
                        opacity: 0;
                        transition: opacity 0.2s ease;
                        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
                        backdrop-filter: blur(10px);
                        min-width: 200px;
                    }
                    
                    .tooltip.show {
                        opacity: 1;
                    }
                    
                    .tooltip-date {
                        font-weight: 600;
                        color: #f0f6fc;
                        margin-bottom: 4px;
                    }
                    
                    .tooltip-content {
                        color: #8b949e;
                        line-height: 1.4;
                    }
                    
                    .platform-stats { 
                        display: flex; 
                        gap: 15px; 
                        flex-wrap: wrap;
                        margin-top: 20px;
                    }
                    
                    .platform-badge { 
                        padding: 8px 16px; 
                        border-radius: 20px; 
                        font-size: 14px; 
                        font-weight: 600;
                        transition: transform 0.2s ease;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
                    }
                    
                    .platform-badge:hover {
                        transform: translateY(-1px);
                    }
                    
                    .leetcode { background: linear-gradient(135deg, #ffa116, #ff8c00); color: white; }
                    .hackerrank { background: linear-gradient(135deg, #00ea64, #00c851); color: white; }
                    .codeforces { background: linear-gradient(135deg, #1f8acb, #1976d2); color: white; }
                    .codechef { background: linear-gradient(135deg, #5b4638, #8d6e63); color: white; }
                    .atcoder { background: linear-gradient(135deg, #3f51b5, #303f9f); color: white; }
                    
                    .chart-container {
                        margin-top: 30px;
                        background: rgba(13, 17, 23, 0.6);
                        border-radius: 12px;
                        padding: 20px;
                        border: 1px solid rgba(48, 54, 61, 0.5);
                    }
                    
                    .legend {
                        margin-top: 20px;
                        font-size: 12px;
                        color: #7d8590;
                        display: flex;
                        align-items: center;
                        gap: 20px;
                        flex-wrap: wrap;
                    }
                    
                    .legend-item {
                        display: flex;
                        align-items: center;
                        gap: 5px;
                    }
                    
                    .legend-color {
                        width: 12px;
                        height: 12px;
                        border-radius: 2px;
                    }
                    
                    .footer {
                        margin-top: 40px;
                        text-align: center;
                        font-size: 12px;
                        color: #7d8590;
                        padding-top: 20px;
                        border-top: 1px solid rgba(48, 54, 61, 0.5);
                    }
                    
                    @keyframes fadeIn {
                        from { opacity: 0; transform: translateY(20px); }
                        to { opacity: 1; transform: translateY(0); }
                    }
                    
                    .container > * {
                        animation: fadeIn 0.6s ease forwards;
                    }
                    
                    @media (max-width: 768px) {
                        .container { padding: 20px; margin: 10px; }
                        .header h1 { font-size: 2rem; }
                        .stats-grid { grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; }
                        .tracker-grid { padding: 15px; }
                        .platform-stats { justify-content: center; }
                    }
                </style>
            </head>
            <body>
                <div class=\"container\">
                    <div class=\"header\">
                        <h1>🚀 DSA Problem Solving Tracker</h1>
                        <p>Track your daily data structures and algorithms practice journey</p>
                    </div>
                    
                    <div class=\"stats-grid\">
                        <div class=\"stat-card\">
                            <div class=\"stat-value\">\${stats.totalProblems}</div>
                            <div class=\"stat-label\">Total Problems</div>
                        </div>
                        <div class=\"stat-card\">
                            <div class=\"stat-value\">\${stats.currentStreak}</div>
                            <div class=\"stat-label\">Current Streak</div>
                        </div>
                        <div class=\"stat-card\">
                            <div class=\"stat-value\">\${stats.longestStreak}</div>
                            <div class=\"stat-label\">Longest Streak</div>
                        </div>
                        <div class=\"stat-card\">
                            <div class=\"stat-value\">\${stats.last30Days}</div>
                            <div class=\"stat-label\">Last 30 Days</div>
                        </div>
                        <div class=\"stat-card\">
                            <div class=\"stat-value\">\${stats.last7Days}</div>
                            <div class=\"stat-label\">This Week</div>
                        </div>
                    </div>
                    
                    <div class=\"tracker-section\">
                        <h3 class=\"section-title\">📅 Daily Activity</h3>
                        <div class=\"tracker-grid\">\`;
            
            // Create grid for last 53 weeks (371 days to ensure we cover a full year)
            const weeks = 53;
            const days = weeks * 7;
            
            for (let week = 0; week < weeks; week++) {
              html += '<div class=\"tracker-row\">';
              for (let day = 0; day < 7; day++) {
                const dayIndex = week * 7 + day;
                const currentDate = new Date(today.getTime() - (days - dayIndex - 1) * 24 * 60 * 60 * 1000);
                const dateStr = currentDate.toISOString().split('T')[0];
                
                const entry = data.entries.find(e => e.date === dateStr);
                const level = entry ? Math.min(4, 1 + Math.floor(Math.random() * 3)) : 0;
                
                const dayName = currentDate.toLocaleDateString('en-US', { weekday: 'long' });
                const formattedDate = currentDate.toLocaleDateString('en-US', { 
                  weekday: 'long', 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                });
                
                html += \`<div class=\"day-cell day-\${level}\" 
                              data-date=\"\${dateStr}\" 
                              data-formatted=\"\${formattedDate}\"
                              data-platform=\"\${entry ? entry.platform : ''}\"
                              data-message=\"\${entry ? entry.message.replace(/\"/g, '&quot;') : ''}\"
                              data-has-activity=\"\${entry ? 'true' : 'false'}\"></div>\`;
              }
              html += '</div>';
            }
            
            html += \`
                        </div>
                        
                        <div class=\"legend\">
                            <span>Less</span>
                            <div class=\"legend-item\">
                                <div class=\"legend-color day-0\"></div>
                            </div>
                            <div class=\"legend-item\">
                                <div class=\"legend-color day-1\"></div>
                            </div>
                            <div class=\"legend-item\">
                                <div class=\"legend-color day-2\"></div>
                            </div>
                            <div class=\"legend-item\">
                                <div class=\"legend-color day-3\"></div>
                            </div>
                            <div class=\"legend-item\">
                                <div class=\"legend-color day-4\"></div>
                            </div>
                            <span>More</span>
                        </div>
                    </div>
                    
                    <div class=\"tracker-section\">
                        <h3 class=\"section-title\">📊 Progress Over Time</h3>
                        <div class=\"chart-container\">
                            <canvas id=\"progressChart\" width=\"400\" height=\"200\"></canvas>
                        </div>
                    </div>
                    
                    <div class=\"tracker-section\">
                        <h3 class=\"section-title\">🏆 Platform Statistics</h3>
                        <div class=\"platform-stats\">\`;
            
            Object.entries(stats.platformCounts).forEach(([platform, count]) => {
              const className = platform.toLowerCase();
              html += \`<div class=\"platform-badge \${className}\">\${platform}: \${count}</div>\`;
            });
            
            html += \`
                        </div>
                    </div>
                    
                    <div class=\"footer\">
                        <p>Last updated: \${new Date().toLocaleString()}</p>
                        <p>💚 Keep up the consistency! Every problem solved is progress made.</p>
                    </div>
                </div>
                
                <div class=\"tooltip\" id=\"tooltip\">
                    <div class=\"tooltip-date\"></div>
                    <div class=\"tooltip-content\"></div>
                </div>
                
                <script>
                    // Tooltip functionality
                    const tooltip = document.getElementById('tooltip');
                    const dayCells = document.querySelectorAll('.day-cell');
                    
                    dayCells.forEach(cell => {
                        cell.addEventListener('mouseenter', (e) => {
                            const rect = cell.getBoundingClientRect();
                            const date = cell.dataset.formatted;
                            const hasActivity = cell.dataset.hasActivity === 'true';
                            const platform = cell.dataset.platform;
                            const message = cell.dataset.message;
                            
                            tooltip.querySelector('.tooltip-date').textContent = date;
                            
                            if (hasActivity) {
                                tooltip.querySelector('.tooltip-content').innerHTML = 
                                    \\\`<strong>Platform:</strong> \\\${platform}<br>
                                     <strong>Problem:</strong> \\\${message.split(' ').slice(2).join(' ')}<br>
                                     <span style=\"color: #39d353;\">✅ Problem solved!</span>\\\`;
                            } else {
                                tooltip.querySelector('.tooltip-content').innerHTML = 
                                    '<span style=\"color: #7d8590;\">No activity this day</span>';
                            }
                            
                            tooltip.style.left = rect.left + window.scrollX + 'px';
                            tooltip.style.top = rect.top + window.scrollY - 10 + 'px';
                            tooltip.classList.add('show');
                        });
                        
                        cell.addEventListener('mouseleave', () => {
                            tooltip.classList.remove('show');
                        });
                    });
                    
                    // Progress chart
                    const ctx = document.getElementById('progressChart').getContext('2d');
                    new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: \${JSON.stringify(chartMonths)},
                            datasets: [{
                                label: 'Problems Solved',
                                data: \${JSON.stringify(chartValues)},
                                borderColor: '#39d353',
                                backgroundColor: 'rgba(57, 211, 83, 0.1)',
                                borderWidth: 3,
                                fill: true,
                                tension: 0.4,
                                pointBackgroundColor: '#39d353',
                                pointBorderColor: '#26a641',
                                pointBorderWidth: 2,
                                pointRadius: 5,
                                pointHoverRadius: 8
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    labels: {
                                        color: '#e6edf3',
                                        font: { size: 14 }
                                    }
                                }
                            },
                            scales: {
                                x: {
                                    ticks: { color: '#8b949e' },
                                    grid: { color: 'rgba(48, 54, 61, 0.5)' }
                                },
                                y: {
                                    beginAtZero: true,
                                    ticks: { 
                                        color: '#8b949e',
                                        stepSize: 1
                                    },
                                    grid: { color: 'rgba(48, 54, 61, 0.5)' }
                                }
                            },
                            interaction: {
                                intersect: false,
                                mode: 'index'
                            }
                        }
                    });
                    
                    // Add some sparkle effect
                    function createSparkle() {
                        const sparkle = document.createElement('div');
                        sparkle.style.position = 'fixed';
                        sparkle.style.width = '4px';
                        sparkle.style.height = '4px';
                        sparkle.style.background = '#39d353';
                        sparkle.style.borderRadius = '50%';
                        sparkle.style.pointerEvents = 'none';
                        sparkle.style.zIndex = '1000';
                        sparkle.style.left = Math.random() * window.innerWidth + 'px';
                        sparkle.style.top = Math.random() * window.innerHeight + 'px';
                        sparkle.style.opacity = '0';
                        sparkle.style.transition = 'all 2s ease-out';
                        
                        document.body.appendChild(sparkle);
                        
                        setTimeout(() => {
                            sparkle.style.opacity = '1';
                            sparkle.style.transform = 'translateY(-100px) scale(0)';
                        }, 10);
                        
                        setTimeout(() => {
                            sparkle.remove();
                        }, 2000);
                    }
                    
                    // Create sparkles occasionally
                    setInterval(createSparkle, 3000);
                </script>
            </body>
            </html>\`;
            
            fs.writeFileSync('.github/tracker/index.html', html);
            console.log('✨ Enhanced HTML tracker generated!');
          "
          
        else
          echo "ℹ️  Not a DSA problem commit, skipping tracker update"
        fi
    
    - name: Commit tracker updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "DSA Tracker Bot"
        
        if [ -n "$(git status --porcelain)" ]; then
          git add .github/tracker/
          git commit -m "📊 Update DSA problem tracker [skip ci]"
          git push
          echo "✅ Tracker updated and pushed!"
        else
          echo "ℹ️  No changes to commit"
        fi