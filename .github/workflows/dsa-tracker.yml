name: DSA Problem Tracker

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  update-tracker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Parse commit and update tracker
      run: |
        # Get the latest commit message
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        COMMIT_DATE=$(git log -1 --pretty=format:"%ci" | cut -d' ' -f1)
        COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
        
        echo "Latest commit: $COMMIT_MSG"
        echo "Commit date: $COMMIT_DATE"
        
        # Check if commit message matches DSA pattern
        # Pattern: YYYY-MM-DD PLATFORM DESCRIPTION
        if [[ $COMMIT_MSG =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]]+(LeetCode|HackerRank|Codeforces|CodeChef|AtCoder)[[:space:]]+.+ ]]; then
          echo "‚úÖ DSA problem commit detected!"
          
          # Extract platform
          PLATFORM=$(echo "$COMMIT_MSG" | grep -oE "(LeetCode|HackerRank|Codeforces|CodeChef|AtCoder)")
          echo "Platform: $PLATFORM"
          
          # Create or update tracker data
          mkdir -p .github/tracker
          
          # Create JSON data file if it doesn't exist
          if [ ! -f .github/tracker/data.json ]; then
            echo '{"entries": []}' > .github/tracker/data.json
          fi
          
          # Add entry to tracker data
          node -e "
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('.github/tracker/data.json', 'utf8'));
            const newEntry = {
              date: '$COMMIT_DATE',
              platform: '$PLATFORM',
              message: '$COMMIT_MSG',
              timestamp: new Date().toISOString()
            };
            
            // Check if entry for this date already exists
            const existingIndex = data.entries.findIndex(entry => entry.date === '$COMMIT_DATE');
            if (existingIndex >= 0) {
              data.entries[existingIndex] = newEntry;
            } else {
              data.entries.push(newEntry);
            }
            
            // Sort by date
            data.entries.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            fs.writeFileSync('.github/tracker/data.json', JSON.stringify(data, null, 2));
            console.log('Tracker data updated!');
          "
          
          # Generate HTML tracker visualization
          node -e "
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('.github/tracker/data.json', 'utf8'));
            
            // Generate last 365 days
            const today = new Date();
            const oneYearAgo = new Date(today.getTime() - 365 * 24 * 60 * 60 * 1000);
            
            let html = \`
            <!DOCTYPE html>
            <html>
            <head>
                <title>DSA Problem Solving Tracker</title>
                <style>
                    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 20px; background: #0d1117; color: #e6edf3; }
                    .tracker-container { max-width: 900px; margin: 0 auto; }
                    .tracker-grid { display: inline-block; }
                    .tracker-row { display: flex; margin-bottom: 3px; }
                    .day-cell { width: 11px; height: 11px; margin: 1px; border-radius: 2px; }
                    .day-0 { background-color: #161b22; }
                    .day-1 { background-color: #0e4429; }
                    .day-2 { background-color: #006d32; }
                    .day-3 { background-color: #26a641; }  
                    .day-4 { background-color: #39d353; }
                    .stats { margin-top: 20px; }
                    .platform-stats { display: flex; gap: 20px; margin-top: 10px; }
                    .platform-badge { padding: 4px 8px; border-radius: 4px; font-size: 12px; }
                    .leetcode { background-color: #ffa116; color: black; }
                    .hackerrank { background-color: #00ea64; color: black; }
                    .codeforces { background-color: #1f8acb; color: white; }
                </style>
            </head>
            <body>
                <div class=\"tracker-container\">
                    <h1>üöÄ DSA Problem Solving Tracker</h1>
                    <p>Track your daily data structures and algorithms practice</p>
                    
                    <div class=\"tracker-grid\">\`;
            
            // Create grid for last 53 weeks (371 days to ensure we cover a full year)
            const weeks = 53;
            const days = weeks * 7;
            
            for (let week = 0; week < weeks; week++) {
              html += '<div class=\"tracker-row\">';
              for (let day = 0; day < 7; day++) {
                const dayIndex = week * 7 + day;
                const currentDate = new Date(today.getTime() - (days - dayIndex - 1) * 24 * 60 * 60 * 1000);
                const dateStr = currentDate.toISOString().split('T')[0];
                
                const entry = data.entries.find(e => e.date === dateStr);
                const level = entry ? Math.min(4, Math.floor(Math.random() * 3) + 1) : 0; // Simple level logic
                
                const title = entry ? \`\${entry.date}: \${entry.platform} - \${entry.message}\` : dateStr;
                html += \`<div class=\"day-cell day-\${level}\" title=\"\${title}\"></div>\`;
              }
              html += '</div>';
            }
            
            // Calculate stats
            const totalProblems = data.entries.length;
            const last30Days = data.entries.filter(e => new Date(e.date) >= new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000)).length;
            const platformCounts = data.entries.reduce((acc, entry) => {
              acc[entry.platform] = (acc[entry.platform] || 0) + 1;
              return acc;
            }, {});
            
            html += \`
                    </div>
                    
                    <div class=\"stats\">
                        <h3>üìä Statistics</h3>
                        <p><strong>Total Problems Solved:</strong> \${totalProblems}</p>
                        <p><strong>Last 30 Days:</strong> \${last30Days} problems</p>
                        
                        <div class=\"platform-stats\">
                            <h4>Platforms:</h4>\`;
            
            Object.entries(platformCounts).forEach(([platform, count]) => {
              const className = platform.toLowerCase();
              html += \`<span class=\"platform-badge \${className}\">\${platform}: \${count}</span>\`;
            });
            
            html += \`
                        </div>
                    </div>
                    
                    <div style=\"margin-top: 30px; font-size: 12px; color: #7d8590;\">
                        <p>Last updated: \${new Date().toLocaleString()}</p>
                        <p>üü© = Problem solved that day | ‚¨ú = No activity</p>
                    </div>
                </div>
            </body>
            </html>\`;
            
            fs.writeFileSync('.github/tracker/index.html', html);
            console.log('HTML tracker generated!');
          "
          
        else
          echo "‚ÑπÔ∏è  Not a DSA problem commit, skipping tracker update"
        fi
    
    - name: Commit tracker updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "DSA Tracker Bot"
        
        if [ -n "$(git status --porcelain)" ]; then
          git add .github/tracker/
          git commit -m "üìä Update DSA problem tracker [skip ci]"
          git push
          echo "‚úÖ Tracker updated and pushed!"
        else
          echo "‚ÑπÔ∏è  No changes to commit"
        fi